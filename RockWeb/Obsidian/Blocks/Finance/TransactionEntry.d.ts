import { DefinedType } from '@Obsidian/SystemGuids';
import { Guid } from '../../Util/Guid';
import { InvokeBlockActionFunc } from '../../Controls/RockBlock';
import { ConfigurationValues } from '../../Index';
import { Campus, FinancialAccount, Person } from '@Obsidian/ViewModels';
import { RockDateType } from '../../Util/RockDate';
import { GatewayControlModel } from '../../Controls/GatewayControl';
export declare type ProcessTransactionArgs = {
    isGivingAsPerson: boolean;
    email: string;
    phoneNumber: string;
    phoneCountryCode: string;
    accountAmounts: Record<Guid, number>;
    street1: string;
    street2: string;
    city: string;
    state: string;
    postalCode: string;
    country: string;
    firstName: string;
    lastName: string;
    businessName: string;
    financialPersonSavedAccountGuid: Guid | null;
    comment: string;
    transactionEntityId: number | null;
    referenceNumber: string;
    campusGuid: Guid | null;
    businessGuid: Guid | null;
    frequencyValueGuid: Guid;
    giftDate: RockDateType;
    isGiveAnonymously: boolean;
};
declare const _default: import("vue").DefineComponent<{}, {
    invokeBlockAction: InvokeBlockActionFunc;
    configurationValues: ConfigurationValues;
}, {
    loading: boolean;
    gatewayErrorMessage: string;
    gatewayValidationFields: Record<string, string>;
    transactionGuid: string;
    criticalError: string;
    doGatewayControlSubmit: boolean;
    pageIndex: number;
    page1Error: string;
    frequencyDefinedTypeGuid: DefinedType;
    args: ProcessTransactionArgs;
}, {
    totalAmount(): number;
    totalAmountFormatted(): string;
    gatewayControlModel(): GatewayControlModel;
    currentPerson(): Person | null;
    accounts(): FinancialAccount[];
    campus(): Campus | null;
    accountAndCampusString(): string;
}, {
    goBack(): void;
    onPageOneSubmit(): void;
    onPageTwoSubmit(): void;
    onGatewayControlSuccess(token: string): void;
    onGatewayControlError(message: string): void;
    onGatewayControlValidation(invalidFields: Record<string, string>): void;
    onPageThreeSubmit(): Promise<void>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
export default _default;
